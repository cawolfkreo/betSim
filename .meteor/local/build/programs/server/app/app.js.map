{"version":3,"sources":["meteor://ðŸ’»app/imports/api/Bets.js","meteor://ðŸ’»app/imports/api/Categories.js","meteor://ðŸ’»app/imports/api/Events.js","meteor://ðŸ’»app/imports/api/UserData.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Bets","Meteor","watch","require","v","Mongo","check","Collection","isServer","publish","userDataPublication","userId","ready","find","fields","publicFields","sort","eventId","methods","eI","p1","p2","pT","b1","b2","bT","eR","insert","Prob1","Prob2","ProbT","Team1","Team2","Tie","Earnings","Categories","CategoriesPublication","res","fetch","console","log","Events","EventsPublication","category","name","place","date","image","team1","team2","prob1","prob2","tie","txtTest","nEvent","Category","Name","Place","Image","Date","UserData","type","coins","all","String","startup"],"mappings":";;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,QAAK,MAAIA;AAAV,CAAd;AAA+B,IAAIC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ;AAAUP,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIE,KAAJ;AAAUR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAIlL,MAAMJ,OAAO,IAAIK,MAAME,UAAV,CAAqB,MAArB,CAAb;;AAEP,IAAIN,OAAOO,QAAX,EAAqB;AACjB;AACAP,SAAOQ,OAAP,CAAe,MAAf,EAAuB,SAASC,mBAAT,GAA+B;AAClD;AAEA,QAAI,CAAC,KAAKC,MAAV,EAAkB;AACd,aAAO,KAAKC,KAAL,EAAP;AACD;;AAED,WAAOZ,KAAKa,IAAL,CAAU;AACfF,cAAQ,KAAKA;AADE,KAAV,EAEJ;AACDG,cAAQd,KAAKe,YADZ;AAEDC,YAAM;AAACC,iBAAS;AAAV;AAFL,KAFI,CAAP;AAML,GAbD;AAcH;;AAEDhB,OAAOiB,OAAP,CAAe;AACX,oBAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8CC,EAA9C,EAAiD;AAE7C1B,SAAK2B,MAAL,CAAY;AACRhB,cAAQ,KAAKA,MADL;AAERM,eAASE,EAFD;AAGRS,aAAOR,EAHC;AAIRS,aAAOR,EAJC;AAKRS,aAAOR,EALC;AAMRS,aAAOR,EANC;AAORS,aAAOR,EAPC;AAQRS,WAAKR,EARG;AASRS,gBAAUR;AATF,KAAZ;AAaH;;AAhBU,CAAf,E;;;;;;;;;;;ACxBA5B,OAAOC,MAAP,CAAc;AAACoC,cAAW,MAAIA;AAAhB,CAAd;AAA2C,IAAIlC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ;AAAUP,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIE,KAAJ;AAAUR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAI9L,MAAM+B,aAAa,IAAI9B,MAAME,UAAV,CAAqB,YAArB,CAAnB;;AAEP,IAAIN,OAAOO,QAAX,EAAqB;AACjB;AACAP,SAAOQ,OAAP,CAAe,YAAf,EAA6B,SAAS2B,qBAAT,GAAiC;AAC1D,WAAOD,WAAWtB,IAAX,EAAP;AACR;;;;;;;;;;AAUK,GAZD;AAaH;;AAEDZ,OAAOiB,OAAP,CAAe;AACb,wBAAqB;AACnB,QAAImB,MAAMF,WAAWtB,IAAX,CAAgB,EAAhB,EAAoByB,KAApB,EAAV;AACAC,YAAQC,GAAR,CAAYH,GAAZ;AACD;;AAJY,CAAf,E;;;;;;;;;;;ACvBAvC,OAAOC,MAAP,CAAc;AAAC0C,UAAO,MAAIA;AAAZ,CAAd;AAAmC,IAAIxC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ;AAAUP,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIE,KAAJ;AAAUR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAItL,MAAMqC,SAAS,IAAIpC,MAAME,UAAV,CAAqB,QAArB,CAAf;;AAEP,IAAIN,OAAOO,QAAX,EAAqB;AACjB;AACAP,SAAOQ,OAAP,CAAe,QAAf,EAAyB,SAASiC,iBAAT,GAA6B;AAClD,WAAOD,OAAO5B,IAAP,EAAP;AACA;;;;;;;;;;AAUH,GAZD;AAaH;;AAEDZ,OAAOiB,OAAP,CAAe;AACX,oBAAkB;AACd,QAAImB,MAAMI,OAAO5B,IAAP,CAAY,EAAZ,EAAgByB,KAAhB,EAAV;AACAC,YAAQC,GAAR,CAAYH,GAAZ;AACH,GAJU;;AAKX,oBAAkBM,QAAlB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,IAAzC,EAA+CC,KAA/C,EAAsDC,KAAtD,EAA6DC,KAA7D,EAAoEC,KAApE,EAA2EC,KAA3E,EAAkFC,GAAlF,EAAsF;AAClF,QAAIC,UAAU,EAAd;AAEAA,eAAYV,WAAW,IAAvB;AACAU,eAAYT,OAAO,IAAnB;AACAS,eAAYR,QAAQ,IAApB;AACAQ,eAAYP,OAAO,IAAnB;AACAO,eAAYN,QAAQ,IAApB;AACAM,eAAYL,QAAQ,IAApB;AACAK,eAAYJ,QAAQ,IAApB;AACAI,eAAYH,QAAQ,IAApB;AACAG,eAAYF,QAAQ,IAApB;AACAE,eAAYD,MAAM,IAAlB;AAEAb,YAAQC,GAAR,CAAYa,OAAZ;AAEA,QAAIC,SAAS;AACTC,gBAAUZ,QADD;AAETa,YAAMZ,IAFG;AAGTa,aAAOZ,KAHE;AAITa,aAAOX,KAJE;AAKThB,aAAOiB,KALE;AAMThB,aAAOiB,KANE;AAOTU,YAAMb,IAPG;AAQTlB,aAAOsB,KARE;AASTrB,aAAOsB,KATE;AAUTlB,WAAKmB,GAVI;AAWTpD,YAAM;AAXG,KAAb;AAcAyC,WAAOd,MAAP,CAAc2B,MAAd;AACH;;AApCU,CAAf,E;;;;;;;;;;;ACvBAxD,OAAOC,MAAP,CAAc;AAAC6D,YAAS,MAAIA;AAAd,CAAd;AAAuC,IAAI3D,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ;AAAUP,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIE,KAAJ;AAAUR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAI1L,MAAMwD,WAAW,IAAIvD,MAAME,UAAV,CAAqB,UAArB,CAAjB;;AAEP,IAAIN,OAAOO,QAAX,EAAqB;AACjB;AACAP,SAAOQ,OAAP,CAAe,UAAf,EAA2B,SAASC,mBAAT,GAA+B;AACtD;AAEA,QAAI,CAAC,KAAKC,MAAV,EAAkB;AACd,aAAO,KAAKC,KAAL,EAAP;AACD;;AAED,WAAOgD,SAAS/C,IAAT,CAAc;AACnBF,cAAQ,KAAKA;AADM,KAAd,EAEJ;AACDG,cAAQ8C,SAAS7C;AADhB,KAFI,CAAP;AAKL,GAZD;AAaH;;AAEDd,OAAOiB,OAAP,CAAe;AACX,8BAA2B;AACvB0C,aAASjC,MAAT,CAAgB;AACZkC,YAAM,MADM;AAEZlD,cAAQ,KAAKA,MAFD;AAGZmD,aAAO;AAHK,KAAhB;AAKH,GAPU;;AAQX,sBAAoB;AAChB,QAAIC,MAAMH,SAAS/C,IAAT,CAAc,EAAd,EAAkByB,KAAlB,EAAV;AACAC,YAAQC,GAAR,CAAY,iBAAZ;AACAD,YAAQC,GAAR,CAAYuB,GAAZ,EAHgB,CAIhB;;AACA,WAAOA,GAAP;AACH,GAdU;;AAeX,qBAAmBpD,MAAnB,EAA2B;AACvBL,UAAMK,MAAN,EAAcqD,MAAd;AAEA,QAAI3B,MAAMuB,SAAS/C,IAAT,CACN;AAAEF,cAAQA;AAAV,KADM,EAER2B,KAFQ,EAAV;AAGA,WAAOD,GAAP;AACH;;AAtBU,CAAf,E;;;;;;;;;;;ACvBA,IAAIpC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+DN,OAAOI,KAAP,CAAaC,QAAQ,qBAAR,CAAb;AAA6CL,OAAOI,KAAP,CAAaC,QAAQ,2BAAR,CAAb;AAAmDL,OAAOI,KAAP,CAAaC,QAAQ,uBAAR,CAAb;AAA+CL,OAAOI,KAAP,CAAaC,QAAQ,yBAAR,CAAb;AAOzNF,OAAOgE,OAAP,CAAe,MAAM,CACnB;AACD,CAFD,E","file":"/app.js","sourcesContent":["import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const Bets = new Mongo.Collection(\"Bets\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('Bets', function userDataPublication() {\r\n        //return Bets.find();\r\n\r\n        if (!this.userId) {\r\n            return this.ready();\r\n          }\r\n        \r\n          return Bets.find({\r\n            userId: this.userId\r\n          }, {\r\n            fields: Bets.publicFields,\r\n            sort: {eventId: 1}\r\n          });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    \"UserData.addBet\"(eI, p1, p2, pT, b1, b2, bT, eR){\r\n\r\n        Bets.insert({\r\n            userId: this.userId,\r\n            eventId: eI,\r\n            Prob1: p1,\r\n            Prob2: p2,\r\n            ProbT: pT,\r\n            Team1: b1,\r\n            Team2: b2,\r\n            Tie: bT,\r\n            Earnings: eR\r\n\r\n        });\r\n    \r\n    }  \r\n});\r\n","import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const Categories = new Mongo.Collection(\"Categories\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('Categories', function CategoriesPublication() {\r\n        return Categories.find();\r\n/*\r\n        if (!this.userId) {\r\n            return this.ready();\r\n          }\r\n        \r\n          return UserData.find({\r\n            userId: this.userId\r\n          }, {\r\n            fields: UserData.publicFields\r\n          });*/\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n  \"Categories.getAll\"(){\r\n    let res = Categories.find({}).fetch();\r\n    console.log(res);\r\n  }\r\n\r\n});","import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const Events = new Mongo.Collection(\"Events\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('Events', function EventsPublication() {\r\n        return Events.find();\r\n        /*\r\n                if (!this.userId) {\r\n                    return this.ready();\r\n                  }\r\n                \r\n                  return UserData.find({\r\n                    userId: this.userId\r\n                  }, {\r\n                    fields: UserData.publicFields\r\n                  });*/\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    \"Events.getAll\"() {\r\n        let res = Events.find({}).fetch();\r\n        console.log(res);\r\n    },\r\n    \"Events.addEvent\"(category, name, place, date, image, team1, team2, prob1, prob2, tie){\r\n        let txtTest = \"\";\r\n\r\n        txtTest += (category + \"\\n\");\r\n        txtTest += (name + \"\\n\");\r\n        txtTest += (place + \"\\n\");\r\n        txtTest += (date + \"\\n\");\r\n        txtTest += (image + \"\\n\");\r\n        txtTest += (team1 + \"\\n\");\r\n        txtTest += (team2 + \"\\n\");\r\n        txtTest += (prob1 + \"\\n\");\r\n        txtTest += (prob2 + \"\\n\");\r\n        txtTest += (tie + \"\\n\");\r\n\r\n        console.log(txtTest);\r\n\r\n        let nEvent = {\r\n            Category: category,\r\n            Name: name,\r\n            Place: place,\r\n            Image: image,\r\n            Team1: team1,\r\n            Team2: team2,\r\n            Date: date,\r\n            Prob1: prob1,\r\n            Prob2: prob2,\r\n            Tie: tie,\r\n            Bets: []\r\n        };\r\n\r\n        Events.insert(nEvent);\r\n    }\r\n});","import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const UserData = new Mongo.Collection(\"UserData\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('UserData', function userDataPublication() {\r\n        //return UserData.find();\r\n\r\n        if (!this.userId) {\r\n            return this.ready();\r\n          }\r\n        \r\n          return UserData.find({\r\n            userId: this.userId\r\n          }, {\r\n            fields: UserData.publicFields\r\n          });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    \"UserData.createUserData\"(){\r\n        UserData.insert({\r\n            type: \"USER\",\r\n            userId: this.userId,\r\n            coins: 1000\r\n        });\r\n    },\r\n    \"UserData.getAll\"() {\r\n        let all = UserData.find({}).fetch();\r\n        console.log(\"All user data: \");\r\n        console.log(all);\r\n        //Lo Anterior funciona\r\n        return all;\r\n    },\r\n    \"UserData.getData\"(userId) {\r\n        check(userId, String);\r\n\r\n        let res = UserData.find(\r\n            { userId: userId }           \r\n        ).fetch();\r\n        return res;\r\n    }    \r\n});\r\n","import { Meteor } from 'meteor/meteor';\n\nimport \"../imports/api/Bets\";\nimport \"../imports/api/Categories\";\nimport \"../imports/api/Events\";\nimport \"../imports/api/UserData\";\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}
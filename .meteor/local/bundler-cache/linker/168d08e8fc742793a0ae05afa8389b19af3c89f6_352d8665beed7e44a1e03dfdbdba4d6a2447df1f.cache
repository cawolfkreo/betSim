[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"Categories.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// imports/api/Categories.js                                                               //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\nmodule.export({\n  Categories: () => Categories\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Categories = new Mongo.Collection(\"Categories\");\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('Categories', function CategoriesPublication() {\n    return Categories.find();\n    /*\n            if (!this.userId) {\n                return this.ready();\n              }\n            \n              return UserData.find({\n                userId: this.userId\n              }, {\n                fields: UserData.publicFields\n              });*/\n  });\n}\n\nMeteor.methods({\n  \"Categories.getAll\"() {\n    let res = Categories.find({}).fetch();\n    console.log(res);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// imports/api/Events.js                                                                   //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\nmodule.export({\n  Events: () => Events\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Events = new Mongo.Collection(\"Events\");\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('Events', function EventsPublication() {\n    return Events.find();\n    /*\n            if (!this.userId) {\n                return this.ready();\n              }\n            \n              return UserData.find({\n                userId: this.userId\n              }, {\n                fields: UserData.publicFields\n              });*/\n  });\n}\n\nMeteor.methods({\n  \"Events.getAll\"() {\n    let res = Events.find({}).fetch();\n    console.log(res);\n  },\n\n  \"Events.addEvent\"(category, name, place, date, image, team1, team2, prob1, prob2, tie) {\n    let txtTest = \"\";\n    txtTest += category + \"\\n\";\n    txtTest += name + \"\\n\";\n    txtTest += place + \"\\n\";\n    txtTest += date + \"\\n\";\n    txtTest += image + \"\\n\";\n    txtTest += team1 + \"\\n\";\n    txtTest += team2 + \"\\n\";\n    txtTest += prob1 + \"\\n\";\n    txtTest += prob2 + \"\\n\";\n    txtTest += tie + \"\\n\";\n    console.log(txtTest);\n    let nEvent = {\n      Category: category,\n      Name: name,\n      Place: place,\n      Image: image,\n      Team1: team1,\n      Team2: team2,\n      Date: date,\n      Prob1: prob1,\n      Prob2: prob2,\n      Tie: tie,\n      Bets: []\n    };\n    Events.insert(nEvent);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"UserData.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// imports/api/UserData.js                                                                 //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\nmodule.export({\n  UserData: () => UserData\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst UserData = new Mongo.Collection(\"UserData\");\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('UserData', function userDataPublication() {\n    //return UserData.find();\n    if (!this.userId) {\n      return this.ready();\n    }\n\n    return UserData.find({\n      userId: this.userId\n    }, {\n      fields: UserData.publicFields\n    });\n  });\n}\n\nMeteor.methods({\n  \"UserData.getAll\"() {\n    let all = UserData.find({}).fetch();\n    console.log(\"All user data: \");\n    console.log(all); //Lo Anterior funciona\n\n    return all;\n  },\n\n  \"UserData.getData\"(userId) {\n    check(userId, String);\n    let res = UserData.find({\n      userId: userId\n    }).fetch();\n    return res;\n  },\n\n  \"UserData.addBet\"(eventId, prob1, prob2, probT, bet1, bet2, betT, earnings) {}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// server/main.js                                                                          //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/Categories\"));\nmodule.watch(require(\"../imports/api/Events\"));\nmodule.watch(require(\"../imports/api/UserData\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/Categories.js","imports/api/Events.js","imports/api/UserData.js","server/main.js"],"names":["module","export","Categories","Meteor","watch","require","v","Mongo","check","Collection","isServer","publish","CategoriesPublication","find","methods","res","fetch","console","log","Events","EventsPublication","category","name","place","date","image","team1","team2","prob1","prob2","tie","txtTest","nEvent","Category","Name","Place","Image","Team1","Team2","Date","Prob1","Prob2","Tie","Bets","insert","UserData","userDataPublication","userId","ready","fields","publicFields","all","String","eventId","probT","bet1","bet2","betT","earnings","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const Categories = new Mongo.Collection(\"Categories\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('Categories', function CategoriesPublication() {\r\n        return Categories.find();\r\n/*\r\n        if (!this.userId) {\r\n            return this.ready();\r\n          }\r\n        \r\n          return UserData.find({\r\n            userId: this.userId\r\n          }, {\r\n            fields: UserData.publicFields\r\n          });*/\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n  \"Categories.getAll\"(){\r\n    let res = Categories.find({}).fetch();\r\n    console.log(res);\r\n  }\r\n\r\n});","import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const Events = new Mongo.Collection(\"Events\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('Events', function EventsPublication() {\r\n        return Events.find();\r\n        /*\r\n                if (!this.userId) {\r\n                    return this.ready();\r\n                  }\r\n                \r\n                  return UserData.find({\r\n                    userId: this.userId\r\n                  }, {\r\n                    fields: UserData.publicFields\r\n                  });*/\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    \"Events.getAll\"() {\r\n        let res = Events.find({}).fetch();\r\n        console.log(res);\r\n    },\r\n    \"Events.addEvent\"(category, name, place, date, image, team1, team2, prob1, prob2, tie){\r\n        let txtTest = \"\";\r\n\r\n        txtTest += (category + \"\\n\");\r\n        txtTest += (name + \"\\n\");\r\n        txtTest += (place + \"\\n\");\r\n        txtTest += (date + \"\\n\");\r\n        txtTest += (image + \"\\n\");\r\n        txtTest += (team1 + \"\\n\");\r\n        txtTest += (team2 + \"\\n\");\r\n        txtTest += (prob1 + \"\\n\");\r\n        txtTest += (prob2 + \"\\n\");\r\n        txtTest += (tie + \"\\n\");\r\n\r\n        console.log(txtTest);\r\n\r\n        let nEvent = {\r\n            Category: category,\r\n            Name: name,\r\n            Place: place,\r\n            Image: image,\r\n            Team1: team1,\r\n            Team2: team2,\r\n            Date: date,\r\n            Prob1: prob1,\r\n            Prob2: prob2,\r\n            Tie: tie,\r\n            Bets: []\r\n        };\r\n\r\n        Events.insert(nEvent);\r\n    }\r\n});","import { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\nimport { check } from \"meteor/check\";\r\n\r\nexport const UserData = new Mongo.Collection(\"UserData\");\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    Meteor.publish('UserData', function userDataPublication() {\r\n        //return UserData.find();\r\n\r\n        if (!this.userId) {\r\n            return this.ready();\r\n          }\r\n        \r\n          return UserData.find({\r\n            userId: this.userId\r\n          }, {\r\n            fields: UserData.publicFields\r\n          });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    \"UserData.getAll\"() {\r\n        let all = UserData.find({}).fetch();\r\n        console.log(\"All user data: \");\r\n        console.log(all);\r\n        //Lo Anterior funciona\r\n        return all;\r\n    },\r\n    \"UserData.getData\"(userId) {\r\n        check(userId, String);\r\n\r\n        let res = UserData.find(\r\n            { userId: userId }           \r\n        ).fetch();\r\n        return res;\r\n    },\r\n    \"UserData.addBet\"(eventId, prob1, prob2, probT, bet1, bet2, betT, earnings){\r\n\r\n    }\r\n});\r\n","import { Meteor } from 'meteor/meteor';\n\nimport \"../imports/api/Categories\";\nimport \"../imports/api/Events\";\nimport \"../imports/api/UserData\";\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]